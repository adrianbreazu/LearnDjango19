Lesson 1
- STEP 1 - Create a project
    - from command line run:
        $ django-admin startproject mysite
    - this will create:
        - manage.py: a command-line utility that lets you interact with Django projects
        - mysite/ directory - the actual Python package for your project
        - mysite/__init__.py - an empty file that tells Python that this directory should be considered
        a Python package
        - mysite/settings.py - settings/configuration dor this django project
        - mysite/urls.py - the URL declaration for this django project , a table of content
        - mysite/wsgi.py -  an entry-point for WSGI-compatible web servers to serve the project
- STEP 2 - RUN THE SERVER - NOT FOR PRODUCTION !!!
    $ python manage.py runserver
    - if you want to run on a different port please add the port number
- STEP 3 - CREATE AN APP
    - project vs app: an app is an web application that does somethig, a project is a collection of apps
    for an particular website. An app can be present in multiple projects
    - for creating an app run the following line in command line:
        $ python manage.py startapp polls
    - this will create a new directory structure:
- STEP 4 - WRITE YOUR FIRST VIEW
    - for this you need to edit the polls/views.py
    - in order to call a view you need to map it to URL, so please create file urls.py in polls directory
    - add the url line in polls/urls.py
    - after this you need to link the app urls.py to the project urls.py by changing the mysite/urls.py file
    - now with $python manager.py runserver you should be able to access the localhost:8000/polls/ message

Lesson 2
- STEP 1 - Database setup
    - open mysite/settings.py . by default django uses SQLite
    - if you want to use another database, you need to install appropiate "database bindings" and change the
    following keys in DATABASE 'default':
        - ENGINE - like 'django.db.backends.sqlite3' or 'django.db.backends.postgresql', ...
        - NAME - the name of the database, it should be a full absolute path with file name. example
        'os.path.join(BASE_DIR, 'db.sqlite3')'
        - USERNAME, PASSWORD and HOST should be used if a different SQLite database is use
    - INSTALLED_APPS - represent the list of installed django apps
        - django.contrib.admin - the admin site
        - django.contrib.auth - the authentication system
        - django.contrib.contenttype - framework for content types
        - django.contrib.sessions - a session framework
        - django.contrib.messages - a messaging framework
        - django.contrib.staticfiles - framework for managing static files
    $ python manage.py migrate
        - this will run migrate for all installed apps
- STEP 2 - CREATE MODELS
    - this will represent the database layer
    - DEF: a model is te single, definitive source of truth about your data. it continas the fields and
    behaviours of the data you're storing.
    - each model class needs to be a subclass of django,db.model.Model. Each clas variable represents a
    database field in the model. The variable name will represent the column name, you can also choose a
    human-readable name (this will be the first positional argument.
- STEP 3 - ACTIVATE MODELS
    - go edit mysite/settings.py and change the INSTALLED_APPS by adding the plug to the new app:
        'polls.apps.PollsConfig'
    - now run the migrate polls command:
        $ python manage.py makemigrations polls
    - now run the sqlmigrate command:
        $ python manage.py sqlmigrate polls 0001
    - if you need to check for problems in your project you can run the next command without making
    migrations $ python manage.py check
    - now you must run the migration using the command:
        $ python manage.py migrate