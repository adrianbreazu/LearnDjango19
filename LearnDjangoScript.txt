-------------------- Lesson 1 --------------------
- STEP 1 - Create a project
    - from command line run:
        $ django-admin startproject mysite
    - this will create:
        - manage.py: a command-line utility that lets you interact with Django projects
        - mysite/ directory - the actual Python package for your project
        - mysite/__init__.py - an empty file that tells Python that this directory should be considered
        a Python package
        - mysite/settings.py - settings/configuration dor this django project
        - mysite/urls.py - the URL declaration for this django project , a table of content
        - mysite/wsgi.py -  an entry-point for WSGI-compatible web servers to serve the project
- STEP 2 - RUN THE SERVER - NOT FOR PRODUCTION !!!
    $ python manage.py runserver
    - if you want to run on a different port please add the port number
- STEP 3 - CREATE AN APP
    - project vs app: an app is an web application that does somethig, a project is a collection of apps
    for an particular website. An app can be present in multiple projects
    - for creating an app run the following line in command line:
        $ python manage.py startapp polls
    - this will create a new directory structure:
- STEP 4 - WRITE YOUR FIRST VIEW
    - for this you need to edit the polls/views.py
    - in order to call a view you need to map it to URL, so please create file urls.py in polls directory
    - add the url line in polls/urls.py
    - after this you need to link the app urls.py to the project urls.py by changing the mysite/urls.py file
    - now with $python manager.py runserver you should be able to access the localhost:8000/polls/ message

-------------------- Lesson 2 --------------------
- STEP 1 - Database setup
    - open mysite/settings.py . by default django uses SQLite
    - if you want to use another database, you need to install appropiate "database bindings" and change the
    following keys in DATABASE 'default':
        - ENGINE - like 'django.db.backends.sqlite3' or 'django.db.backends.postgresql', ...
        - NAME - the name of the database, it should be a full absolute path with file name. example
        'os.path.join(BASE_DIR, 'db.sqlite3')'
        - USERNAME, PASSWORD and HOST should be used if a different SQLite database is use
    - INSTALLED_APPS - represent the list of installed django apps
        - django.contrib.admin - the admin site
        - django.contrib.auth - the authentication system
        - django.contrib.contenttype - framework for content types
        - django.contrib.sessions - a session framework
        - django.contrib.messages - a messaging framework
        - django.contrib.staticfiles - framework for managing static files
    $ python manage.py migrate
        - this will run migrate for all installed apps
- STEP 2 - CREATE MODELS
    - this will represent the database layer
    - DEF: a model is te single, definitive source of truth about your data. it continas the fields and
    behaviours of the data you're storing.
    - each model class needs to be a subclass of django,db.model.Model. Each clas variable represents a
    database field in the model. The variable name will represent the column name, you can also choose a
    human-readable name (this will be the first positional argument.
- STEP 3 - ACTIVATE MODELS
    - go edit mysite/settings.py and change the INSTALLED_APPS by adding the plug to the new app:
        'polls.apps.PollsConfig'
    - now run the migrate polls command:
        $ python manage.py makemigrations polls
    - now run the sqlmigrate command:
        $ python manage.py sqlmigrate polls 0001
    - if you need to check for problems in your project you can run the next command without making
    migrations $ python manage.py check
    - now you must run the migration using the command:
        $ python manage.py migrate
- STEP 4 - Play with the API
    - $ python manage.py shell
    - now that you are in shell please use the follwing commands:
        >>> from polls.models import Question, Choice
        >>> Question.objects.all()
        >>> from django.utils import timezone
        >>> q = Question(question_text="What's new?", pub_date=timezone.now())
        >>> q.save()
        >>> q.id
        >>> q.question_text
        >>> q.question_text = "What's up?"
        >>> q.save()
        >>> Question.objects.all()
    - you can set a more human readable text by adding the __str__ method to model. It
    is highly recommended to do this for all model classes
- STEP 5 - Introducing the Django Admin
    - create superuser using the command:
        $ python manage.py createsuperuser
        (username: adrianb & password: ioana007)
    - next start the development server and fo the /admin page
    - make the poll app modifiable from the admin page:
        go to polls/admin.py and add the following:
            from django.contrib import admin
            from .models import Question

            admin.site.register(Question)

-------------------- Lesson 3 --------------------
- STEP 1 - VIEW OVERVIEW
    - A view is a “type” of Web page in your Django application that generally serves a
    specific function and has a specific template
    - URLconf maps URL patterns to views
- STEP 2 - Write more views
    - you can add more views by adding them to polls/views.py
    - now you need to wire them to the url(), polls.urls module
- STEP 3 - Write views tat actually do something
    - A view is responsible for doing one of two things: return a HttpResponse object containing the content for
    the requested page, or raise an exeption such as Http404.
    - A view can read records from db, use a template system, generate PDF file, output XML, create ZIP or other
    things. All Django wants is that HttpResponse or an exception.
    - create a directory called "templates" in your app. the templates describe how Django will load and render templates.
    In this template directory you need to create a new directory called the same as the app in this case polls and
    and there you can add the .html file. Because how Djanog is build you can refer the template simply as polls/index.html
    - you need to add the APP_DIRS = True to mysite/settings.py this way django will look for teamplates in each app
    installed
- STEP 4 - RAISING A 404 ERROR
    - you can raise 404 error pages using the library from django.http import Http404
    - or use the get_object_or_404() shortcut. you should use this function instead of automatically catching the
    ObjectDoesNotExist  because that would couple the model layer to the view layer. One of the foremost design goals
    of Django is to maintain loose coupling. Some controlled coupling is introduced in the django.shortcuts module.
- STEP 5 - Use the template system
    - template system uses dot-lookup syntax. In the example {{ question.question_text }}, first Django does a
    dictionary lookup on the object question. Failing that it tries an attribute lookup which works in this case. If
    it would also failed, it would've tried a list-index lookup.
    - method-calling happens in the {% for %} loop: question.choice_set.all() which returns an iterable of Choice objects
    and is suitable for use in the {% for %} tag
- STEP 6 - Remove hardcoded URLs in templates
    - from "<li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>" you will use
    this   "<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>"
- STEP 7 - Naming URL names
    - useful when you have multiple apps that all have the same view.
    - you need to add namespace. This can easily be done by adding app_name in the polls/urls.py
    - now you have to change your polls/index.html

-------------------- Lesson 4 --------------------
- STEP 1 - Write a simple form
    - see comments in polls.html, views.py
- STEP 2 - Less code is better
    - detail() and results() are redundant
    - Amend URLconf - see urls.py (changed <question_id> to <pk>)
    - Amends views - see views.py